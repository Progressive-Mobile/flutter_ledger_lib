// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Generated bindings
class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_execution_result(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _free_execution_result(
      ptr,
    );
  }

  late final _free_execution_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free_execution_result');
  late final _free_execution_result = _free_execution_resultPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void free_cstring(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _free_cstring(
      ptr,
    );
  }

  late final _free_cstringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_cstring');
  late final _free_cstring =
      _free_cstringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void lb_store_dart_post_cobject(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _lb_store_dart_post_cobject(
      ptr,
    );
  }

  late final _lb_store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'lb_store_dart_post_cobject');
  late final _lb_store_dart_post_cobject = _lb_store_dart_post_cobjectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> create_ledger_transport() {
    return _create_ledger_transport();
  }

  late final _create_ledger_transportPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'create_ledger_transport');
  late final _create_ledger_transport = _create_ledger_transportPtr
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  ffi.Pointer<ffi.Void> ledger_transport_clone_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ledger_transport_clone_ptr(
      ptr,
    );
  }

  late final _ledger_transport_clone_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('ledger_transport_clone_ptr');
  late final _ledger_transport_clone_ptr = _ledger_transport_clone_ptrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void ledger_transport_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ledger_transport_free_ptr(
      ptr,
    );
  }

  late final _ledger_transport_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ledger_transport_free_ptr');
  late final _ledger_transport_free_ptr = _ledger_transport_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ledger_exchange(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    int cla,
    int ins,
    int p1,
    int p2,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _ledger_exchange(
      result_port,
      transport,
      cla,
      ins,
      p1,
      p2,
      data,
    );
  }

  late final _ledger_exchangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ledger_exchange');
  late final _ledger_exchange = _ledger_exchangePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, int, int, int, int,
          ffi.Pointer<ffi.Char>)>();
}
